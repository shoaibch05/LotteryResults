// src/Pages/StaticPages/Sitemap.jsx
import { useEffect, useState } from "react";

const Sitemap = () => {
  const [urls, setUrls] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchSitemap();
  }, []);

  const fetchSitemap = async () => {
    try {
      setLoading(true);

      // Fetch from your backend sitemap endpoint
      const response = await fetch("http://localhost:5000/sitemap.xml");

      if (!response.ok) {
        throw new Error("Failed to fetch sitemap");
      }

      const xmlText = await response.text();

      // Parse XML and extract URLs
      const parser = new DOMParser();
      const xmlDoc = parser.parseFromString(xmlText, "application/xml");

      // Check for parsing errors
      if (xmlDoc.getElementsByTagName("parsererror").length > 0) {
        throw new Error("Invalid XML format");
      }

      // Extract all URL elements
      const urlElements = xmlDoc.getElementsByTagName("url");
      const parsedUrls = Array.from(urlElements).map((urlElement) => {
        const loc =
          urlElement.getElementsByTagName("loc")[0]?.textContent || "";
        const lastmod =
          urlElement.getElementsByTagName("lastmod")[0]?.textContent || "N/A";
        const changefreq =
          urlElement.getElementsByTagName("changefreq")[0]?.textContent ||
          "N/A";
        const priority =
          urlElement.getElementsByTagName("priority")[0]?.textContent || "N/A";

        return { loc, lastmod, changefreq, priority };
      });

      setUrls(parsedUrls);
      setError(null);
    } catch (err) {
      console.error("Sitemap fetch error:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <section className="mx-5 px-5 py-4 my-4 bg-white shadow-sm rounded-lg">
        <div className="text-center py-8 text-gray-600">Loading sitemap...</div>
      </section>
    );
  }

  return (
    <section className="mx-5 px-5 py-4 my-4 bg-white shadow-sm rounded-lg">
      <h1 className="text-2xl font-bold text-gray-900 mb-6 text-center">
        Sitemap
      </h1>

      {error && (
        <div className="bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded mb-6">
          Error loading sitemap: {error}
        </div>
      )}

      {urls.length === 0 && !error && (
        <div className="text-center py-8 text-gray-500">
          No URLs found in sitemap
        </div>
      )}

      <div className="space-y-4">
        {urls.map((url, index) => (
          <div
            key={index}
            className="border-l-4 border-blue-500 pl-4 py-3 bg-gray-50 hover:bg-gray-100 transition-colors rounded"
          >
            <a
              href={url.loc}
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-600 hover:text-blue-800 hover:underline font-medium block mb-2 break-all"
            >
              {url.loc}
            </a>

            <div className="grid grid-cols-3 gap-4 text-sm text-gray-600">
              <div>
                <span className="font-semibold text-gray-700">
                  Last Modified:
                </span>
                <p>{url.lastmod}</p>
              </div>
              <div>
                <span className="font-semibold text-gray-700">
                  Change Frequency:
                </span>
                <p className="capitalize">{url.changefreq}</p>
              </div>
              <div>
                <span className="font-semibold text-gray-700">Priority:</span>
                <p>{url.priority}</p>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="mt-8 p-4 bg-blue-50 border border-blue-200 rounded">
        <h3 className="font-semibold text-blue-900 mb-2">About this Sitemap</h3>
        <p className="text-sm text-blue-800">
          This sitemap contains {urls.length} URLs and is automatically
          generated by the backend. Search engines use this to discover and
          crawl all pages on the website.
        </p>
      </div>
    </section>
  );
};

export default Sitemap;
